module cpu_54(
  input CLK,
  input rst,
  input [15:0]control,
  output [7:0] oData,
  output [7:0] ctrl
);
wire clk;
wire out;
wire [31:0]test;
Divider d(CLK,rst,8,clk);
wire [31:0]imme;
wire [31:0] PC;
wire [31:0] ALU;
wire [31:0]signal;
wire [1023:0]regfiles;
wire [31:0]regfile;
wire RF_we;
wire [31:0]branch;
wire [1:0]ALU_a_mux;
wire [2:0]ALU_b_mux;
wire [2:0]PC_mux;
wire [1:0]RF_addr_mux;
wire [31:0]RF_wdata;
wire [3:0]RF_data_mux;
wire [4:0] RF_waddr;
wire [31:0] RS;
wire [31:0] RT;
wire [4:0] RS_addr=imme[25:21];
wire [4:0] RT_addr=imme[20:16];
wire [4:0] RD_addr=imme[15:11];
wire [31:0] DM_addr;
wire [31:0] DM_wdata;
wire [31:0] DM_rdata;
wire [31:0] ext5_z;
wire [31:0] ext18_s;
wire [31:0] ext16_z;
wire [31:0] ext16_s;
wire [31:0] ALU_a;
wire [31:0] ALU_b;
wire [3:0] ALUC;
wire [31:0]MULT_a;
wire [31:0]MULT_b;
wire [63:0]MULT_z;
wire [31:0]DIV_dividend;
wire [31:0]DIV_divisor;
wire [31:0]DIV_q;
wire [31:0]DIV_r;
wire DIV_start;
wire DIV_busy;
wire [31:0]MULTU_a;
wire [31:0]MULTU_b;
wire [63:0]MULTU_z;
wire [31:0]DIVU_dividend;
wire [31:0]DIVU_divisor;
wire [31:0]DIVU_q;
wire [31:0]DIVU_r;
wire DIVU_start;
wire DIVU_busy;
wire HI_ena;
wire [31:0]HI_wdata;
wire [31:0]HI_rdata;
wire LO_ena;
wire [31:0]LO_wdata;
wire [31:0]LO_rdata;
wire [31:0]clz;
wire zero;
wire carry;
wire negative;
wire overflow; 
wire [31:0] PC_wdata;
wire [31:0] NPC;
wire [31:0] EPC;
wire exception;
wire intr; 
wire [31:0]CP0_wdata;
wire [31:0]cause;
wire [31:0] CP0_rdata;
wire [31:0] status;
wire [31:0] exc_addr;
pc p(clk,rst,1,DIV_busy+DIVU_busy,PC_wdata,PC);
assign NPC=PC+4;
ip_ram_initial instruction((PC-32'h00400000)/4,imme);
wire ADD=(imme[31:26]==6'b0)?(imme[5:0]==6'b100000)?1:0:0;
wire ADDU=(imme[31:26]==6'b0)?(imme[5:0]==6'b100001)?1:0:0;
wire SUB=(imme[31:26]==6'b0)?(imme[5:0]==6'b100010)?1:0:0;
wire SUBU=(imme[31:26]==6'b0)?(imme[5:0]==6'b100011)?1:0:0;
wire AND=(imme[31:26]==6'b0)?(imme[5:0]==6'b100100)?1:0:0;
wire OR=(imme[31:26]==6'b0)?(imme[5:0]==6'b100101)?1:0:0;
wire XOR=(imme[31:26]==6'b0)?(imme[5:0]==6'b100110)?1:0:0;
wire NOR=(imme[31:26]==6'b0)?(imme[5:0]==6'b100111)?1:0:0;
wire SLT=(imme[31:26]==6'b0)?(imme[5:0]==6'b101010)?1:0:0;
wire SLTU=(imme[31:26]==6'b0)?(imme[5:0]==6'b101011)?1:0:0;
wire SLL=(imme[31:26]==6'b0)?(imme[5:0]==6'b000000)?1:0:0;
wire SRL=(imme[31:26]==6'b0)?(imme[5:0]==6'b000010)?1:0:0;
wire SRA=(imme[31:26]==6'b0)?(imme[5:0]==6'b000011)?1:0:0;
wire SLLV=(imme[31:26]==6'b0)?(imme[5:0]==6'b000100)?1:0:0;
wire SRLV=(imme[31:26]==6'b0)?(imme[5:0]==6'b000110)?1:0:0;
wire SRAV=(imme[31:26]==6'b0)?(imme[5:0]==6'b000111)?1:0:0;
wire JR=(imme[31:26]==6'b0)?(imme[5:0]==6'b001000)?1:0:0;
wire ADDI=(imme[31:26]==6'b001000)?1:0;
wire ADDIU=(imme[31:26]==6'b001001)?1:0;
wire ANDI=(imme[31:26]==6'b001100)?1:0;
wire ORI=(imme[31:26]==6'b001101)?1:0;
wire XORI=(imme[31:26]==6'b001110)?1:0;
wire LW=(imme[31:26]==6'b100011)?1:0;
wire SW=(imme[31:26]==6'b101011)?1:0;
wire BEQ=(imme[31:26]==6'b000100)?1:0;
wire BNE=(imme[31:26]==6'b000101)?1:0;
wire SLTI=(imme[31:26]==6'b001010)?1:0;
wire SLTIU=(imme[31:26]==6'b001011)?1:0;
wire LUI=(imme[31:26]==6'b001111)?1:0;
wire J=(imme[31:26]==6'b000010)?1:0;
wire JAL=(imme[31:26]==6'b000011)?1:0;
wire CLZ=(imme[31:26]==6'b011100)?(imme[5:0]==6'b100000)?1:0:0;
wire JALR=(imme[31:26]==6'b000000)?(imme[5:0]==6'b001001)?1:0:0;
wire BGEZ=(imme[31:26]==6'b000001)?1:0;
wire LB=(imme[31:26]==6'b100000)?1:0;
wire LBU=(imme[31:26]==6'b100100)?1:0;
wire LHU=(imme[31:26]==6'b100101)?1:0;
wire SB=(imme[31:26]==6'b101000)?1:0;
wire SH=(imme[31:26]==6'b101001)?1:0;
wire LH=(imme[31:26]==6'b100001)?1:0;
wire MFC0=(imme[31:26]==6'b010000)?(imme[25:21]==5'b00000)?1:0:0;
wire MTC0=(imme[31:26]==6'b010000)?(imme[25:21]==5'b00100)?1:0:0;
wire MFLO=(imme[31:26]==6'b000000)?(imme[5:0]==6'b010010)?1:0:0;
wire MFHI=(imme[31:26]==6'b000000)?(imme[5:0]==6'b010000)?1:0:0;
wire MTHI=(imme[31:26]==6'b000000)?(imme[5:0]==6'b010001)?1:0:0;
wire MTLO=(imme[31:26]==6'b000000)?(imme[5:0]==6'b010011)?1:0:0;
wire SYSCALL=(imme[31:26]==6'b000000)?(imme[5:0]==6'b001100)?1:0:0;
wire TEQ=(imme[31:26]==6'b000000)?(imme[5:0]==6'b110100)?1:0:0;
wire BREAK=(imme[31:26]==6'b000000)?(imme[5:0]==6'b001101)?1:0:0;
wire ERET=(imme[31:26]==6'b010000)?(imme[5:0]==6'b011000)?1:0:0;
wire MUL=(imme[31:26]==6'b011100)?(imme[5:0]==6'b000010)?1:0:0;
wire MULTU=(imme[31:26]==6'b000000)?(imme[5:0]==6'b011001)?1:0:0;
wire DIV=(imme[31:26]==6'b000000)?(imme[5:0]==6'b011010)?1:0:0;
wire DIVU=(imme[31:26]==6'b000000)?(imme[5:0]==6'b011011)?1:0:0;
wire DM_ena;
wire DM_word;
wire DM_bit;
wire DM_halfword;
wire DM_we;
assign DM_bit=SB||LB||LBU;
assign DM_halfword=SH||LH||LHU;
assign DM_word=SW||LW;
assign DM_ena=SW||LW||LB||LH||LHU||LBU||SB||SH;
assign DM_we=SW||SB||SH;
assign DM_addr=ALU;
assign ALUC[0]=SUBU||SUB||OR||ORI||NOR||SLT||SLTI||SRL||SRLV||BEQ||BNE||TEQ;
assign ALUC[1]=ADD||ADDI||SUB||XOR||XORI||NOR||SLT||SLTI||SLTU||SLTIU||SLL||SLLV||BEQ||BNE||BGEZ||TEQ;
assign ALUC[2]=AND||OR||XOR||NOR||SLL||SRL||SRA||SLLV||SRAV||SRLV||ANDI||ORI||XORI;
assign ALUC[3]=SLT||SLTU||SLL||SRL||SRA||SLLV||SRAV||SRLV||SLTI||SLTIU||LUI;
assign branch=(BEQ&&zero)?(NPC+ext18_s):((BNE&&~zero)?(NPC+ext18_s):(BGEZ&&~negative)?(NPC+ext18_s):(TEQ&&zero)?exc_addr:NPC);
assign ALU_a_mux[0]=SLL||SRL||SRA;
assign ALU_a_mux[1]=JAL;
assign ALU_b_mux[0]=ANDI||ORI||XORI||SLTIU||LUI||JAL;
assign ALU_b_mux[1]=ADDIU||ADDI||LW||SW||SLTI||JAL||LB||LH||LHU||LBU||LB||LH||LHU||LBU||SB||SH;
assign ALU_b_mux[2]=BGEZ;
assign PC_mux[0]=JR||J||JAL||JALR||SYSCALL||BREAK;
assign PC_mux[1]=BEQ||BNE||J||JAL||BGEZ||TEQ;
assign PC_mux[2]=ERET||SYSCALL||BREAK;
assign RF_we=ADD||ADDU||SUB||SUBU||AND||OR||XOR||NOR||SLT||SLTU||SLL||SRL||SRA||SLLV||SRAV||SRLV||ADDI||ADDIU||ANDI||ORI||XORI||LW||SLTI||SLTIU||LUI||JAL||LB||LH||LHU||LBU||CLZ||JALR||MFC0||MFHI||MFLO||MUL;
assign RF_data_mux[0]=LW||LBU||LHU||JALR||MFHI||MUL;
assign RF_data_mux[1]=LB||LBU||CLZ||JALR||MFLO||MUL;
assign RF_data_mux[2]=LH||LHU||CLZ||JALR;
assign RF_data_mux[3]=MFC0||MFHI||MFLO||MUL;
assign RF_addr_mux[0]=LW||LUI||XORI||ORI||ANDI||ADDIU||ADDI||SLTI||SLTIU||LB||LH||LHU||LBU||MFC0;
assign RF_addr_mux[1]=JAL;
ext5_z e0(imme[10:6],ext5_z);
ext16_s e1(imme[15:0],ext16_s);
ext16_z e2(imme[15:0],ext16_z);
ext18_s e3({imme[15:0],2'b0},ext18_s);
wire [31:0] rdata;
mux161 m0(ALU,rdata,{{25{rdata[7]}},rdata[6:0]},{{24{1'b0}},rdata[7:0]},{{17{rdata[15]}},rdata[14:0]},{{16{1'b0}},rdata[15:0]},clz,NPC,CP0_rdata,HI_rdata,LO_rdata,MULT_z[31:0],0,0,0,0,RF_data_mux,RF_wdata);
mux41 m1(RS,ext5_z,PC,0,ALU_a_mux,ALU_a);
mux81 m2(RT,ext16_z,ext16_s,32'h8,0,0,0,0,ALU_b_mux,ALU_b);
mux81 m3(NPC,RS,branch,{PC[31:28],imme[25:0],2'b0},EPC,exc_addr,0,0,PC_mux,PC_wdata);
mux41_addr m4(RD_addr,RT_addr,5'b11111,0,RF_addr_mux,RF_waddr);
assign HI_ena=MTHI||DIV||DIVU||MULTU;
wire [1:0]HI_mux;
assign HI_mux[0]=MTHI||DIVU;
assign HI_mux[1]=DIV||DIVU;
mux41 m5(MULTU_z[63:32],RS,DIV_r,DIVU_r,HI_mux,HI_wdata);
pcreg HI(clk,rst,HI_ena,HI_wdata,HI_rdata);
assign LO_ena=MTLO||DIV||DIVU||MULTU;
wire [1:0]LO_mux;
assign LO_mux[0]=MTLO||DIVU;
assign LO_mux[1]=DIV||DIVU;
mux41 m6(MULTU_z[31:0],RS,DIV_q,DIVU_q,LO_mux,LO_wdata);
pcreg LO(clk,rst,LO_ena,LO_wdata,LO_rdata);
CLZ clz0(RS,clz);
mult mul0(RS,RT,MULT_z);
MULTU mul1(clk,rst,RS,RT,MULTU_z);
DIV div0(clk,rst,RS,RT,DIV,DIV_q,DIV_r,DIV_busy);
DIVU div1(clk,rst,RS,RT,DIVU,DIVU_q,DIVU_r,DIVU_busy);
Regfiles R(clk,rst,RF_we,RS_addr,RT_addr,RF_waddr,RF_wdata,RS,RT);
alu A(ALU_a,ALU_b,ALUC,ALU,zero,carry,negative,overflow);
wire [2:0]switch={DM_bit,DM_halfword,DM_word};
dram data(clk,DM_ena,DM_addr-32'h10010000,switch,RT,DM_we,test,DM_rdata);
assign exception=SYSCALL||BREAK||(TEQ&&zero);
assign cause=SYSCALL?32'b100000:BREAK?32'b100100:TEQ?32'b110100:32'b0;
CP0 cp0(clk,rst,MFC0,MTC0,exception,intr,ERET,PC,RD_addr,RT,cause,CP0_rdata,status,EPC,exc_addr);  
wire switch_cs,seg_cs;
sw_mem_sel sms(switch_cs,control,DM_rdata,rdata);
io_sel is(DM_addr,DM_ena,DM_we,!DM_we,seg_cs,switch_cs,LW);
seg7x16 sgx(CLK,rst,seg_cs,RT,oData,ctrl);
endmodule